// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyApp.Api.Data;

#nullable disable

namespace MyApp.Api.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20231013115037_mg1")]
    partial class mg1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MyApp.Shared.Models.CartItemModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CartId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProductDetail_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductDetail_ID");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("MyApp.Shared.Models.CartModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("MyApp.Shared.Models.CategoryModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ff9fc8ce-3e02-4af6-bad7-9d5b2a52a1c4"),
                            CategoryName = "Category 1"
                        },
                        new
                        {
                            Id = new Guid("b58573fc-30f0-40da-a10a-3b442818cd35"),
                            CategoryName = "Category 2"
                        },
                        new
                        {
                            Id = new Guid("624c6b5a-dd71-4233-bd5a-4eea042c7cb0"),
                            CategoryName = "Category 3"
                        },
                        new
                        {
                            Id = new Guid("0f18a264-f418-4e85-becb-b9afb283e7fc"),
                            CategoryName = "Category 4"
                        },
                        new
                        {
                            Id = new Guid("c0bec17d-c110-455a-aec1-f09a29a1eb8f"),
                            CategoryName = "Category 5"
                        });
                });

            modelBuilder.Entity("MyApp.Shared.Models.ColorModel", b =>
                {
                    b.Property<Guid>("ColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ColorCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColorName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ColorId");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            ColorId = new Guid("33a7c2ba-62f9-4fc2-87e0-437e23a70dc6"),
                            ColorCode = "#000000",
                            ColorName = "Đen"
                        },
                        new
                        {
                            ColorId = new Guid("650c93ad-85bc-4fee-98b4-bf6589891eb3"),
                            ColorCode = "#FFFFFF",
                            ColorName = "Trắng"
                        },
                        new
                        {
                            ColorId = new Guid("b8ee00b4-c413-4b06-943a-e8dd677b2497"),
                            ColorCode = "#FF0000",
                            ColorName = "Đỏ"
                        },
                        new
                        {
                            ColorId = new Guid("be826aae-578f-4a57-b6c8-6afd6eeef675"),
                            ColorCode = "#00FF00",
                            ColorName = "Xanh lá cây"
                        },
                        new
                        {
                            ColorId = new Guid("b881f580-9bae-4a8e-9bd7-bf7d93055a0a"),
                            ColorCode = "#0000FF",
                            ColorName = "Xanh dương"
                        },
                        new
                        {
                            ColorId = new Guid("210e9eff-141b-47ed-aa5f-83741cccfa3a"),
                            ColorCode = "#FFFF00",
                            ColorName = "Vàng"
                        },
                        new
                        {
                            ColorId = new Guid("dc94a391-d011-4fab-83de-88f296e7946c"),
                            ColorCode = "#FFA500",
                            ColorName = "Cam"
                        },
                        new
                        {
                            ColorId = new Guid("f99798ea-1d90-4589-89fd-e0e85fb7c9cb"),
                            ColorCode = "#800080",
                            ColorName = "Tím"
                        },
                        new
                        {
                            ColorId = new Guid("3e6ca4b6-3236-4cec-84a6-6696a9902cb6"),
                            ColorCode = "#FFC0CB",
                            ColorName = "Hồng"
                        },
                        new
                        {
                            ColorId = new Guid("a2312d1e-daa7-4a83-8917-0f15e193e17b"),
                            ColorCode = "#808080",
                            ColorName = "Xám"
                        },
                        new
                        {
                            ColorId = new Guid("0f02b105-68ca-45e9-ae63-cc58c292b89f"),
                            ColorCode = "#A52A2A",
                            ColorName = "Nâu"
                        },
                        new
                        {
                            ColorId = new Guid("a9ce9bf3-caf2-46c1-a216-831dca72d275"),
                            ColorCode = "#000080",
                            ColorName = "Xanh lam"
                        },
                        new
                        {
                            ColorId = new Guid("bffee647-8079-468c-965d-8a0e6817f584"),
                            ColorCode = "#00BFFF",
                            ColorName = "Xanh da trời"
                        },
                        new
                        {
                            ColorId = new Guid("77d28310-f0ff-4137-a4d2-451d19143b92"),
                            ColorCode = "#FFDAB9",
                            ColorName = "Hồng phấn"
                        },
                        new
                        {
                            ColorId = new Guid("96626759-1e7a-42df-bfb3-a5e744b4bcd6"),
                            ColorCode = "#C0C0C0",
                            ColorName = "Xám tro"
                        },
                        new
                        {
                            ColorId = new Guid("71fbe411-7c96-4ec3-8bae-ea7fe70d228b"),
                            ColorCode = "#C0C0C0",
                            ColorName = "Bạc"
                        });
                });

            modelBuilder.Entity("MyApp.Shared.Models.OrderItemModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<Guid?>("ProductDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductDetailId");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("MyApp.Shared.Models.OrderModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Create_Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Delivery_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrderCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("OrderStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Payment_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("RecipientAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecipientPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Ship_Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ShippingFee")
                        .HasColumnType("int");

                    b.Property<int?>("TotalAmout")
                        .HasColumnType("int");

                    b.Property<int?>("TotalAmoutAfterApplyingVoucher")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("VoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("VoucherValue")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("UserId");

                    b.HasIndex("VoucherId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("MyApp.Shared.Models.OrderStatusModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OrderStatusName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrderStatus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e530e531-a0b2-401d-a30a-04d2d93f2105"),
                            OrderStatusName = "Đang được xử    lý"
                        },
                        new
                        {
                            Id = new Guid("81b6f0e4-1c7b-4ea4-9c7d-d638ef3f4933"),
                            OrderStatusName = "Chờ lấy hàng"
                        },
                        new
                        {
                            Id = new Guid("b4f73133-a223-482a-96e3-041d4c0c4e7d"),
                            OrderStatusName = "Đang giao hàng"
                        },
                        new
                        {
                            Id = new Guid("94c5f952-fbc2-4666-976c-9f3370de4074"),
                            OrderStatusName = "Giao hàng thành công"
                        },
                        new
                        {
                            Id = new Guid("e7c087af-40b9-4572-842e-f1d3f56313f6"),
                            OrderStatusName = "Giao hàng không thành công"
                        },
                        new
                        {
                            Id = new Guid("371b5540-3568-48e9-a42e-51a3b9ef36fc"),
                            OrderStatusName = "Hủy đơn"
                        },
                        new
                        {
                            Id = new Guid("8b4da449-a0fb-4ccb-94e6-552a566c27ce"),
                            OrderStatusName = "Yêu cầu trả hàng"
                        },
                        new
                        {
                            Id = new Guid("f966ffa9-8138-48e9-a5e1-0302a8cfd31c"),
                            OrderStatusName = "Chấp nhận trả hàng"
                        });
                });

            modelBuilder.Entity("MyApp.Shared.Models.PaymentModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4d5702cb-533b-450a-ad85-d57d13543254"),
                            PaymentName = "Thanh toán khi nhận hàng"
                        },
                        new
                        {
                            Id = new Guid("3877ac86-8902-4d9e-a3cc-6851e0298edd"),
                            PaymentName = "Thanh toán Online"
                        });
                });

            modelBuilder.Entity("MyApp.Shared.Models.PostModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("MyApp.Shared.Models.ProductDetailModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ColorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Create_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("PriceSale")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Update_At")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductDetails");
                });

            modelBuilder.Entity("MyApp.Shared.Models.ProductImageModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProductDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("MyApp.Shared.Models.ProductModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AvailableQuantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Create_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Long_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Update_At")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("MyApp.Shared.Models.RoleModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b2fb1de6-fda6-4aab-8cac-4f3383d8c3bc"),
                            ConcurrencyStamp = "152d93f2-5a79-413d-9d48-2884133070c0",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("1d967170-a681-4abd-918d-45ffd56588dd"),
                            ConcurrencyStamp = "54eed1b6-f819-4714-a92f-f3057c16c86b",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = new Guid("14e1c343-32c4-4c07-8c51-0f241c731dcf"),
                            ConcurrencyStamp = "376cd97f-0be5-4525-8b97-65e38a3f8f3c",
                            Name = "Guest",
                            NormalizedName = "GUEST"
                        });
                });

            modelBuilder.Entity("MyApp.Shared.Models.UserModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("Points")
                        .HasColumnType("int");

                    b.Property<string>("ProfilePictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MyApp.Shared.Models.UserVoucherModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VoucherId");

                    b.ToTable("UserVouche");
                });

            modelBuilder.Entity("MyApp.Shared.Models.VoucherModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Create_Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("End_Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Minimum_order_value")
                        .HasColumnType("int");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Start_Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Value")
                        .HasColumnType("int");

                    b.Property<Guid?>("VoucherStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("VoucherTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VoucherStatusId");

                    b.HasIndex("VoucherTypeId");

                    b.ToTable("VoucherModel");
                });

            modelBuilder.Entity("MyApp.Shared.Models.VoucherProductModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("VoucherId");

                    b.ToTable("VoucherProduct");
                });

            modelBuilder.Entity("MyApp.Shared.Models.VoucherStatusModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VoucherStatus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("63b3fbb0-c353-4bcc-bf90-4544c9abd1e7"),
                            Name = "Used"
                        },
                        new
                        {
                            Id = new Guid("3955fc02-0304-4049-ade0-d5f6d8ba7688"),
                            Name = "Active"
                        },
                        new
                        {
                            Id = new Guid("f051afbc-22f5-4d9b-b0ad-f6b9ae0d530f"),
                            Name = "Expired"
                        });
                });

            modelBuilder.Entity("MyApp.Shared.Models.VoucherTypeModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VoucherType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("MyApp.Shared.Models.RoleModel", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("MyApp.Shared.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("MyApp.Shared.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("MyApp.Shared.Models.RoleModel", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyApp.Shared.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("MyApp.Shared.Models.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyApp.Shared.Models.CartItemModel", b =>
                {
                    b.HasOne("MyApp.Shared.Models.CartModel", "Cart")
                        .WithMany("CartItem")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyApp.Shared.Models.ProductDetailModel", "ProductDetail")
                        .WithMany("CartItem")
                        .HasForeignKey("ProductDetail_ID");

                    b.Navigation("Cart");

                    b.Navigation("ProductDetail");
                });

            modelBuilder.Entity("MyApp.Shared.Models.CartModel", b =>
                {
                    b.HasOne("MyApp.Shared.Models.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyApp.Shared.Models.OrderItemModel", b =>
                {
                    b.HasOne("MyApp.Shared.Models.OrderModel", "Order")
                        .WithMany("OrderItem")
                        .HasForeignKey("OrderId");

                    b.HasOne("MyApp.Shared.Models.ProductDetailModel", "ProductDetail")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductDetailId");

                    b.Navigation("Order");

                    b.Navigation("ProductDetail");
                });

            modelBuilder.Entity("MyApp.Shared.Models.OrderModel", b =>
                {
                    b.HasOne("MyApp.Shared.Models.OrderStatusModel", "OrderStatus")
                        .WithMany()
                        .HasForeignKey("OrderStatusId");

                    b.HasOne("MyApp.Shared.Models.PaymentModel", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentId");

                    b.HasOne("MyApp.Shared.Models.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("MyApp.Shared.Models.VoucherModel", "Voucher")
                        .WithMany("Orders")
                        .HasForeignKey("VoucherId");

                    b.Navigation("OrderStatus");

                    b.Navigation("PaymentType");

                    b.Navigation("User");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("MyApp.Shared.Models.PostModel", b =>
                {
                    b.HasOne("MyApp.Shared.Models.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MyApp.Shared.Models.ProductDetailModel", b =>
                {
                    b.HasOne("MyApp.Shared.Models.ColorModel", "Colors")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ColorId");

                    b.HasOne("MyApp.Shared.Models.ProductModel", "Product")
                        .WithMany("ProductDetails")
                        .HasForeignKey("ProductId");

                    b.Navigation("Colors");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MyApp.Shared.Models.ProductImageModel", b =>
                {
                    b.HasOne("MyApp.Shared.Models.ProductDetailModel", "ProductDetails")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId");

                    b.Navigation("ProductDetails");
                });

            modelBuilder.Entity("MyApp.Shared.Models.ProductModel", b =>
                {
                    b.HasOne("MyApp.Shared.Models.CategoryModel", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("MyApp.Shared.Models.UserVoucherModel", b =>
                {
                    b.HasOne("MyApp.Shared.Models.UserModel", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyApp.Shared.Models.VoucherModel", "Voucher")
                        .WithMany()
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("MyApp.Shared.Models.VoucherModel", b =>
                {
                    b.HasOne("MyApp.Shared.Models.VoucherStatusModel", "VoucherStatus")
                        .WithMany()
                        .HasForeignKey("VoucherStatusId");

                    b.HasOne("MyApp.Shared.Models.VoucherTypeModel", "VoucherType")
                        .WithMany()
                        .HasForeignKey("VoucherTypeId");

                    b.Navigation("VoucherStatus");

                    b.Navigation("VoucherType");
                });

            modelBuilder.Entity("MyApp.Shared.Models.VoucherProductModel", b =>
                {
                    b.HasOne("MyApp.Shared.Models.ProductModel", "Products")
                        .WithMany("VoucherProduct")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyApp.Shared.Models.VoucherModel", "Voucher")
                        .WithMany()
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Products");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("MyApp.Shared.Models.CartModel", b =>
                {
                    b.Navigation("CartItem");
                });

            modelBuilder.Entity("MyApp.Shared.Models.ColorModel", b =>
                {
                    b.Navigation("ProductDetails");
                });

            modelBuilder.Entity("MyApp.Shared.Models.OrderModel", b =>
                {
                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("MyApp.Shared.Models.ProductDetailModel", b =>
                {
                    b.Navigation("CartItem");

                    b.Navigation("OrderItems");

                    b.Navigation("ProductImages");
                });

            modelBuilder.Entity("MyApp.Shared.Models.ProductModel", b =>
                {
                    b.Navigation("ProductDetails");

                    b.Navigation("VoucherProduct");
                });

            modelBuilder.Entity("MyApp.Shared.Models.VoucherModel", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
